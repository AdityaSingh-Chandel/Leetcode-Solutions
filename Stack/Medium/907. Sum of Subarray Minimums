                       # 31-01-25
            # Time: O( 3n) -> O(n)
            # Space: O( 2n) -> O(n)
        # 115 ms , beats 23%

class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        n=len(arr)
        mod = 10**9 + 7

        ple=[-1]*n            # prev. Less Element
        st=[]
        for i in range(n):
            while st and arr[st[-1]] >= arr[i]:
                st.pop()
            ple[i]=st[-1] if st else -1
            st.append(i)

        nle=[n]*n             # Next Less Element
        st=[]
        for i in range(n-1,-1,-1):
            while st and arr[st[-1]] > arr[i]:
                st.pop()
            nle[i]=st[-1] if st else n
            st.append(i)

        # Now calculate the total_sum of the min elements of each contiguous subarray
        total_sum=0
        for i in range(n):
            left_count = i - ple[i]
            right_count = nle[i] - i

            total_sum = ( total_sum + arr[i] * left_count * right_count) % mod

        return total_sum

