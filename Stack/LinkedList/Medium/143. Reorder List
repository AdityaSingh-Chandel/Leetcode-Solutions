                 # 09-02-25
               # T: O(n)
               # S: O(1) without Stack
               #    O(n/2)~ O(n) with Stack [ Not optimal] 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
from typing import Optional
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if not head or not head.next:
            return

        # Step 1: Find the middle of the linked list
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # Step 2: Reverse the second half of the list in-place
        prev, curr = None, slow.next
        slow.next = None  # Split the list into two halves
        while curr:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node

        # Step 3: Merge the two halves
        first, second = head, prev
        while second:
            temp1, temp2 = first.next, second.next
            first.next = second
            second.next = temp1
            first, second = temp1, temp2


# class Solution:
#     def reorderList(self, head: Optional[ListNode]) -> None:
#         """
#         Do not return anything, modify head in-place instead.
#         """
#         st=[]
#         sl,fast=head,head
#         while fast and fast.next and fast.next.next:
#             sl=sl.next
#             fast=fast.next.next
#         # if fast!=None:
#         #     sl=sl.next
#         sl2=sl.next
#         sl.next=None
#         while sl2:
#             st.append(sl2)
#             sl2=sl2.next
#         curr=head
#         while curr and st:
#             next=curr.next
#             node=st.pop()
#             curr.next=node
#             curr.next.next=next
#             curr=next
#         return head
        
