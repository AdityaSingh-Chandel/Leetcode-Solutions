                          # 25-10-24
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:

        if not head or head.next==None:
            return None
        slow=head
        fast=head
        prev=None
        while fast and fast.next:
            prev=slow
            slow=slow.next
            fast=fast.next.next
        prev.next=slow.next
        return head

        """      
                  # naive
        if not head or head.next==None:
            return None
        n=0
        curr=head
        while curr:
            n+=1
            curr=curr.next
        i=0
        curr=head
        while i< n//2 -1:
            curr=curr.next
            i+=1
        curr.next=curr.next.next
        return head
        """
