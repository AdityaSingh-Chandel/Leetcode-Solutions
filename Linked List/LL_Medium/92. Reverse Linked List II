                                        # 30-10-24
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        # Beats 100%
        if not head or left==right:
            return head
        
        dummy=ListNode(0)
        dummy.next=head

        prev=dummy
        for i in range(left-1):
            prev=prev.next
        
        curr=prev.next
        for i in range(right-left):
            temp=curr.next
            curr.next=temp.next
            temp.next=prev.next
            prev.next=temp
        
        return dummy.next
        


        """     [Didn't work]  # Approach:-  Divide into 3 sections & reverse the middle section --> connect all 3
        if left!=1:
            h1=head
        curr=head
        n=1
        while curr:
            if n==left:
                r_h=curr
            elif n==right:
                h2=curr.next
            n+=1
            curr=curr.next
        def rever(h):
            curr=h
            prev=None
            while curr:
                next=curr.next
                curr.next=prev
                prev=curr
                curr=next
            h=prev
            return h
        r_h=rever(r_h)
        curr=r_h
        while curr.next:
            curr=curr.next
        curr.next=h2
    
        if h1:
            curr=h1
            while curr.next:
                curr=curr.next
            curr.next=r_h

            return h1
        
        return r_h
        """


        
