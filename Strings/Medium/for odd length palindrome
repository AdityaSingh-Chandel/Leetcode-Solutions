                              # 20-01-25
"""
                              # 19-10-24
    #    Without DP 
    #               Running ---- Time Limit Exceeded   (90/142 Test cases)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        l=[]
        for i in range(len(s)):
            for j in range(i+1,len(s)+1):
                l.append(s[i:j])
        ans=""
        for x in l:
            i,j=0,len(x)-1
            while i<=j:
                is_pal=True
                if x[i]!=x[j]:
                    is_pal=False
                    break
                else:
                    i+=1
                    j-=1
            if is_pal:
                if len(x)>len(ans):
                    ans=x
        return ans
"""
             # O(n^2) ; O(1)
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s)==0:
            return ""
        st,end=0,0

        def expand_around_center(l,r):       # O(n) - Helper function
            while l>=0 and r<len(s) and s[l]==s[r]:
                l-=1
                r+=1
            return l+1,r-1
        
        for i in range(len(s)):
            l1,r1 = expand_around_center(i,i)      # for odd length palindrome
            l2,r2 = expand_around_center(i,i+1)     # for even length palindrome
 
            # Check- dono me se kaun sa bda h
            if r1-l1 > end-st:
                st,end=l1,r1
            if r2-l2 > end-st:
                st,end=l2,r2
        return s[st:end+1]      # Any valid anser is acceptable


#   DP Solution
        



        
