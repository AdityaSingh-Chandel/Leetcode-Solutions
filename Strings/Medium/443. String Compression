                # 20-01-25
     # O(n) 
     # O(1)
# class Solution:
#     def compress(self, chars: List[str]) -> int:
#         j=0
#         c=1
#         for i in range(1,len(chars)):
#             if chars[i]==chars[i-1]:
#                 c+=1
#             else:
#                 chars[j]=chars[i-1]
#                 j+=1
#                 if c>1:
#                     for char in str(c):
#                         char[j]=char
#                         j+=1
                

#                 c=1
#         chars[j]=chars[-1]
#         j+=1
#         if c>1:
#             for char in str(c):
#                 char[j]=char
#                 j+=1

class Solution:
    def compress(self, chars: list[str]) -> int:
        write = 0  # Pointer to write the compressed string
        read = 0  # Pointer to read through the chars array
        
        while read < len(chars):
            char = chars[read]
            count = 0
            
            # Count the occurrences of the current character
            while read < len(chars) and chars[read] == char:
                read += 1
                count += 1
            
            # Write the character
            chars[write] = char
            write += 1
            
            # Write the count if greater than 1
            if count > 1:
                for digit in str(count):
                    chars[write] = digit
                    write += 1
        
        return write  # The new length of the compressed array
        
