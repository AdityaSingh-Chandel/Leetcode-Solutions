                 # 10-02-25
           # O(3^4)
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        def is_val(part):
            return (0<= int(part)<=255) and (part=="0" or part[0]!="0")
        def backtrack(start,parts):
            if len(parts)==4:
                if start==len(s):
                    res.append('.'.join(parts))
                return 
            for lent in range(1,4):
                if start+lent <= len(s):
                    part=s[start:start+lent]
                    if is_val(part):
                        backtrack(start+lent, parts + [part])
                
        res=[]
        backtrack(0,[])
        return res
""" Problem:
A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.
"""
