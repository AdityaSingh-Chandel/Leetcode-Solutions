                     # 03-01-25
# class Solution:
#     def exist(self, board: List[List[str]], word: str) -> bool:
#         def check(x,y,idx):
#             if idx == len(word)-1:
#                 return True
#             if (
#                 x<0 or x>=len(word) or 
#                 y<0 or y>=len(word[0]) or
#                 board[x][y] != word[idx] 
#                 ):
#                 return False
#             temp = board[x][y]
#             board[x][y] = '$'
#             found = (check(x-1,y,idx+1) or \
#                     check(x+1,y,idx+1) or \
#                     check(x,y-1,idx+1) or \
#                     check(x,y+1,idx+1))
#             board[x][y] = temp
            
#             return found

#         for i in range(len(board)):
#             for j in range(len(board[0])):

#                 if (board[i][j] == word[0]) and check(i,j,0) :
#                     return True
#         return False               

from typing import List

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        def check(x, y, idx):
            # If the current index matches the length of the word, we found the word
            if idx == len(word):
                return True
            
            # Check boundaries and character match
            if (
                x < 0 or x >= len(board) or 
                y < 0 or y >= len(board[0]) or 
                board[x][y] != word[idx]
            ):
                return False

            # Temporarily mark the cell as visited
            temp = board[x][y]
            board[x][y] = '$'
            
            # Recursively explore neighbors
            found = (
                check(x - 1, y, idx + 1) or  # Up
                check(x + 1, y, idx + 1) or  # Down
                check(x, y - 1, idx + 1) or  # Left
                check(x, y + 1, idx + 1)     # Right
            )
            
            # Restore the cell value for backtracking
            board[x][y] = temp
            
            return found

        # Start the search for the first letter of the word
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0] and check(i, j, 0):
                    return True

        return False
