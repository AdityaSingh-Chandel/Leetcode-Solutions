                  # 09-02-25
    #Time: O(9 C k)   (Choosing k numbers from 1-9) 
    #Space:  O(k) for recursion depth + O(9Ck) for results 
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        res=[]

        def backtrack(start,path,tar):
            if len(path)==k and tar==0:
                res.append(list(path))
            if len(path)>k or tar<0:
                return 
            for i in range(start,10):
                path.append(i)
                backtrack(i+1,path,tar-i)
                path.pop()
        backtrack(1,[],n)
        return res
