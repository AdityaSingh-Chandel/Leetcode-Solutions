                    # 17-01-25
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
                # O(logn)
                # O(1)
    """APPROACH (Base):
    if ( m%2==0 and nums[m]==nums[m+1]) or ( m->odd and nums[m]==nums[m-1]):
        l++
    else (ulta):
        h=m  """

        l, h = 0, len(nums) - 1
        while l<h:
            m= (l+h)//2
            if m%2==1:
                m-=1
            if nums[m]==nums[m+1]:
                l=m+2
            else:
                h=m
        return nums[l]

                  # did not work
        # n=len(nums)
        # low,hi=0,n-1
        # while low<=hi:
        #     m=(low+hi)//2
        #     if ( m==0 or m==n-1) and  nums[m-1]<nums[m]<nums[m+1]:
        #         return nums[m]
        #     elif m%2==0:
        #         if nums[m]==nums[m+1]:
        #             low=m+1
        #         else:
        #             high=m-1
        #     else:
        #         if nums[m]==nums[m+1]:
        #             high=m-1
        #         else:
        #             low=m+1
            
            
