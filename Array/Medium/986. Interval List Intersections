                      # 15-12-24
"""
The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval.
For example, the intersection of [1, 3] and [2, 4] is [2, 3].

Input: firstList = [[0,2],   [5,10],     [13,23],   [24,25]]
secondList =       [[1,5],   [8,12],     [15,24],   [25,26]]
Output:            [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
"""
class Solution:
    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:
        # m,n=len(firstList)-1,len(secondList)-1
        # i,j=1,1
        # out=[]
        # if m==0 or n==0:
        #     return out
        # if firstList[0][1] >= secondList[0][0]:
        #         out.append([secondList[0][0],firstList[0][1]])
        # while i<m and j<n:
        #     if firstList[i][0] >= secondList[j-1][1]:
        #         out.append([secondList[j-1][1],firstList[i][0]])
            
        #     if firstList[i][1] >= secondList[j][0]:
        #         out.append([secondList[j][0],firstList[i][1]])
            
        #     i+=1
        #     j+=1
        # return out

        m,n=len(firstList)-1,len(secondList)-1
        out=[]
        # if m==0 or n==0:
        #     return out
        i,j=0,0
        while i<=m and j<=n:
            st = max(firstList[i][0],secondList[j][0])
            end  = min(firstList[i][1],secondList[j][1])

            if st <= end:
                out.append([st,end])
            
            if firstList[i][1] < secondList[j][1]:
                i+=1                               # main logic -- incrementing i,j
            else:
                j+=1
        return out
                
                
