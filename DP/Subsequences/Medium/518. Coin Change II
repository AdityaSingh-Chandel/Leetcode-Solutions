                   # 02-02-25
             # O(m * n)
             # O(m * n)
# class Solution:
#     def change(self, amount: int, coins: List[int]) -> int:
#         m,n=len(coins),amount
#         dp=[[0 for i in range(n+1)]for j in range(m+1)]
#         #print(dp)
#         for i in range(0,m+1):
#             dp[i][0]=1
#         for i in range(1,m+1):
#             for j in range(n+1):
#                 dp[i][j]=dp[i-1][j]
#                 if coins[i-1]<=j:
#                     dp[i][j]+=dp[i][j-coins[i-1]]
#         return dp[m][n]

      # More Efficient -- using 1D aray ( Smjho ise)
         # O(m * n)
         # O(n)
from typing import List

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0] * (amount + 1)  
        dp[0] = 1  # Base case: There's one way to make amount 0 (using no coins)

        # Process each coin
        for coin in coins:
            for j in range(coin, amount + 1):  # Iterate forward to prevent duplicate use
                dp[j] += dp[j - coin]

        return dp[amount]
