              # 03-02-25
   # Problem : word1 to word2 ( Insert , Delete , Replace)
              # O(m*n)
              # O(m*n)
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m,n=len(word1),len(word2)
        dp=[[0 for _ in range(m+1)] for j in range(n+1)]
        for i in range(n+1):
            dp[i][0]=i
        for j in range(m+1):
            dp[0][j]=j
        for i in range(1,n+1):
            for j in range(1,m+1):
                if word1[j-1]==word2[i-1]:
                    dp[i][j]=dp[i-1][j-1]
                else:
                    dp[i][j]=1 + min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1])
        return dp[n][m]

# Recursion --
        #    # Recursion -- Correct 26/1147 cases ( Time Limit Exceeded)
             # Time: O( 3^ max(m,n))  ;  (Exponential)
             # Space: O(max(m,n))  ; (Recursion stack depth)
        # m,n=len(word1),len(word2)
        # def minDist(word1,word2,m,n):
        #     if m==0:
        #         return n
        #     if n==0:
        #         return m
        #     if word1[m-1]==word2[n-1]:
        #         return minDist(word1,word2,m-1,n-1)
        #     else:
        #         return 1 + min(minDist(word1,word2,m-1,n),minDist(word1,word2,m,n-1),minDist(word1,word2,m-1,n-1))
        # ans=minDist(word1,word2,m,n)
        # return ans
        
